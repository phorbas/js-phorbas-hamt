import {hamt_new_ln2, hamt_load} from '@phorbas/hamt'

import {assert, phorbas_test_ctx} from './_utils.jsy'
import {store_text_lines, load_text_lines} from './_utils.jsy'

import {poem_lines} from './poem.mjs'

const hamt_test_bits = [8,7,6,5,4,3,2,1]
//const hamt_test_bits = [6, 4]

describe @ 'poem', @::
  for let n_hamt_bits of hamt_test_bits ::
    const hamt_new = (...args) =>
      hamt_new_ln2(n_hamt_bits, ...args)

    describe @ `${1 << n_hamt_bits} slot hamt nodes`, @::

      it @ 'hamt set sync roundtrip', @::>
        const stg_src = await phorbas_test_ctx()
        const sync = new Set()

        const ref_poem = await store_text_lines(poem_lines, sync, stg_src)

        let hamt_root = await hamt_new(stg_src).union(sync)

        await validate_poem(ref_poem, stg_src)

        await sync_and_validate_poem(ref_poem, hamt_root)


      it @ 'hamt sync multi_union roundtrip', @::>
        const stg_src = await phorbas_test_ctx()
        let hp = hamt_new(stg_src).multi_union()

        const ref_poem = await store_text_lines(poem_lines, hp.fork(), stg_src)

        let hamt_root = await hp.union_all()

        await validate_poem(ref_poem, stg_src)

        await sync_and_validate_poem(ref_poem, hamt_root)


      it @ 'hamt dead ref sync multi_union roundtrip', @::>
        const stg_src = await phorbas_test_ctx()
        let hp = hamt_new(stg_src).multi_union()

        const ref_poem = await store_text_lines(poem_lines, hp.fork(), stg_src)

        let hamt_ref = await hp.union_all(true)

        await validate_poem(ref_poem, stg_src)

        let hamt_root = await hamt_load(hamt_ref, stg_src)
        await sync_and_validate_poem(ref_poem, hamt_root)



async function sync_and_validate_poem(ref_poem, hamt_root) ::
  const stg_dst = await phorbas_test_ctx()

  // prove it DOES NOT work without sync
  await validate_poem_absent(ref_poem, stg_dst)
  // sync everything in the set
  await hamt_root.sync_push(stg_dst)
  // prove it DOES work after sync
  await validate_poem(ref_poem, stg_dst)


async function validate_poem_absent(ref_poem, stg_dst) ::
  const poem = await load_text_lines(ref_poem, stg_dst)
  assert.equal(poem, undefined)


async function validate_poem(ref_poem, stg_dst) ::
  const poem = await load_text_lines(ref_poem, stg_dst)
  assert.notEqual(poem, undefined)

  const rt_lines = await Promise.all(poem)
  for let i in rt_lines ::
    assert.equal @ rt_lines[i], poem_lines[i], `poem line ${i}`

