import {init_hamt_shared_codec} from '@phorbas/hamt'

import @{}
  init_opaque_shared_codec
  opaque_basic
  opaque_tahoe
  opaque_ecdsa_basic
  opaque_ecdsa_tahoe

#IF PLAT_WEB
  from '@phorbas/opaque/esm/web/index.mjs'
#ELIF PLAT_NODEJS
  from '@phorbas/opaque/esm/node/index.mjs'

import {phorbas_store, bkc_with_js_map, u8_to_utf8} from '@phorbas/store'
import {cbor_encode, cbor_decode} from 'cbor-codec'
export {cbor_encode, cbor_decode} from 'cbor-codec'

export const { assert, expect } = require('chai')

init_opaque_shared_codec @:
  encode: cbor_encode
  decode: cbor_decode

init_hamt_shared_codec @:
  encode: cbor_encode
  decode: cbor_decode


function bind_phorbas_test_ctx(opaque) ::
  return () => phorbas_store(bkc_with_js_map(), {opaque})

export const all_phorbas_test_ctx = @{}
  opaque_basic: bind_phorbas_test_ctx(opaque_basic)
  opaque_tahoe: bind_phorbas_test_ctx(opaque_tahoe)
  opaque_ecdsa_basic: bind_phorbas_test_ctx(opaque_ecdsa_basic)
  opaque_ecdsa_tahoe: bind_phorbas_test_ctx(opaque_ecdsa_tahoe)

export const phorbas_test_ctx = all_phorbas_test_ctx.opaque_tahoe


export async function store_text_lines(text_lines, sync, stg) ::
  stg = stg.with_sync(sync)

  const refs = await Promise.all @
    Array.from @ text_lines,
      ln => stg.store_utf8(ln)

  const root_ref = await stg.store_content(cbor_encode(refs))

  if sync.done :: sync.done()
  return root_ref


export async function load_text_lines(root_ref, stg) ::
  const u8_refs = await stg.fetch_content(root_ref)
  if ! u8_refs :: return

  const refs = cbor_decode(u8_refs)
  return refs.map @
    ln_ref => stg.fetch_utf8(ln_ref)

