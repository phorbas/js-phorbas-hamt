import {bound_hamt_hashkey} from './_bit_vec.jsy'
import {hamt_trie_union_op} from './_alg_trie_union.jsy'

export const is_trie_node = e => undefined !== e && undefined !== e[1]
export const is_trie_leaf = e => undefined !== e && undefined === e[1]
export const is_trie_empty = e => e === undefined

export class HAMTTrieNode ::
  static with_hamt_ctx(hamt_ctx) ::
    class HAMTTrieNode_ extends this ::

    const p = HAMTTrieNode_.prototype
    p.hamt_ctx = hamt_ctx
    p._root_ = p
    return HAMTTrieNode_

  constructor(slots, offset, opaque_key) ::
    this.slots = slots
    this.offset = offset
    this.hk_offset = bound_hamt_hashkey(offset, slots.length)
    this.opaque_key = opaque_key

  k21pair() :: return this.opaque_key.k21pair()

  create_child() ::
    const {slots, offset} = this
    return this.hamt_ctx.create(new Array(slots.length), 1+offset)

  async load_trie(k21pair) ::
    return this.hamt_ctx.load(k21pair)

  async create_peer(slots) ::
    const {hamt_ctx, offset} = this
    return hamt_ctx.create(slots, offset)

  async store() ::
    let {opaque_key} = this
    if undefined !== opaque_key ::
      return 1

    const {slots, offset, hamt_ctx} = this
    this.opaque_key = opaque_key =
      await hamt_ctx.store(slots, offset)
    return true


  merge_onto(op_union) ::
    const {slots} = this
    for const hk in slots ::
      const ref = slots[hk]
      if undefined !== ref ::
        if undefined !== ref[1] ::
          op_union.add_node(hk, ref)
        else op_union.add(ref[0])

  async merge_siblings(op_union, trie_siblings) ::
    for let trie of trie_siblings ::
      if ! trie :: continue

      if ! trie.merge_onto ::
        trie = await this.load_trie(trie)
        if ! trie ::
          throw new Error('Trie not found')

      trie.merge_onto(op_union)

    return op_union

  async multi_union(iterable, trie_siblings) ::
    const op_union = hamt_trie_union_op(this)
    for const k2loc of iterable ::
      op_union.add(k2loc)

    return trie_siblings
      ? this.merge_siblings(op_union, trie_siblings)
      : op_union


  async union(iterable, trie_siblings) ::
    const op_union = await this.multi_union @
      iterable, trie_siblings

    const new_trie = await op_union.union_all()
    await new_trie.store()
    return new_trie

